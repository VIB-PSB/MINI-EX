executor {
    name = 'sge'
    queueSize = 5
}

process.container = "vibpsb/mini-ex:latest"
singularity {
    enabled = true
    cacheDir = "singularity_cache"
    autoMounts = true
}

params {
	expressionMatrix = "$baseDir/example/INPUTS/*_matrix.txt"
	markersOut = "$baseDir/example/INPUTS/*_allMarkers.txt"
	cell2clusters = "$baseDir/example/INPUTS/*_cells2clusters.txt"
	cluster2ident = "$baseDir/example/INPUTS/*_identities.txt"
	TF_list = "$baseDir/example/INPUTS/TF_list.txt"
	termsOfInterest = "$baseDir/example/INPUTS/GOsIwant.txt"
	//termsOfInterest = null

	grnboostOut = "/$baseDir/example/OUTPUTS/GRNBoost2_output/*_grnboost2.txt"
    //grnboostOut = null
	
    doMotifAnalysis = true // set to <false> if no motif mapping data is available [CAUTION: without motif data MINI-EX is less reliable]
	featureFile_motifs = "$baseDir/data_ath/ath_2021.1_motifMapping.out.gz"
	infoTF = "$baseDir/data_ath/ath_TF2fam2mot.txt"
	GOfile = "$baseDir/data_ath/ath_full_BP_expcur_ext_names.txt" //set to <null> if GO data is not available (when doing so, termsOfInterest should also be set to <null>)
    alias = "$baseDir/data_ath/ath_gene_aliases.txt"
	
	script_enricher = "$baseDir/bin/enricherv2.4"
	script_checkInput = "$baseDir/bin/MINIEX_checkInput.py"
	script_grnboost = "$baseDir/bin/MINIEX_grnboostMultiprocess.py"
	script_motifs = "$baseDir/bin/MINIEX_filterForMotifs.py"
	script_topDEGs = "$baseDir/bin/MINIEX_selectTopDEGs.py"
	script_expTFs = "$baseDir/bin/MINIEX_filterForTFExp.py"
	script_info = "$baseDir/bin/MINIEX_makeInfoFile.py"
	script_clustermap = "$baseDir/bin/MINIEX_clustermap.py"
	script_networkCentrality = "$baseDir/bin/MINIEX_network_analysis.py"
	script_checkReference = "$baseDir/bin/MINIEX_checkRef.py"
	script_filesEnrichment = "$baseDir/bin/MINIEX_makeFilesEnrichment.py"	
	script_makedfRef = "$baseDir/bin/MINIEX_makeRankingDf_ref.py"
	script_makedfStd = "$baseDir/bin/MINIEX_makeRankingDf_std.py"
    script_makeborda = "$baseDir/bin/MINIEX_makeBorda.py"
	script_scoreEdges = "$baseDir/bin/MINIEX_scoreEdges.py"
    script_heatmapTops = "$baseDir/bin/MINIEX_visual_heatmap_top150.py"
	script_regmaps = "$baseDir/bin/MINIEX_regmap.py"
	
	tops = "700"
	expressionFilter = "10"
	motifFilter = "TF-F_motifs" // To use the motifs of the TF family, specify "TF-F_motifs". To only use the motifs known for a TF, specify "TF_motifs".
	topRegs = "150"
}


process {

    withName: check_input_files {
        clusterOptions = '-l h_vmem=10G'
    }
    withName: get_expressed_genes {
        clusterOptions = '-l h_vmem=10G'
    }
    withName: run_grnboost {
        clusterOptions = '-l h_vmem=15G -pe <pe_name> 5' 
    }
    withName: unzip_motifMappings {
        executor='local'
    }
    withName: run_enricher_motifs {
        clusterOptions = '-l h_vmem=4G'
    }
    withName: filter_motifs {
        clusterOptions = '-l h_vmem=20G'
    }
    withName: filter_motifs_dummy {
        executor='local'
    }
    withName: get_topDEGs {
        clusterOptions = '-l h_vmem=10G'
    }
    withName: run_enricher_cluster {
        clusterOptions = '-l h_vmem=4G'
    }
    withName: filter_expression {
        clusterOptions = '-l h_vmem=20G'
    }
	withName: make_info_file {
        clusterOptions = '-l h_vmem=10G'
    }
    withName: network_centrality {
        clusterOptions = '-l h_vmem=20G'
    }
    withName: getFiles_enrichment {
        clusterOptions = '-l h_vmem=10G'
    }
    withName: GO_enricher {
        clusterOptions = '-l h_vmem=4G'
    }
	withName: check_reference {
        clusterOptions = '-l h_vmem=10G'
    }
    withName: ranking_df_ref {
        clusterOptions = '-l h_vmem=10G'
    }
    withName: ranking_df_std {
        clusterOptions = '-l h_vmem=10G'
    }
    withName: makeBorda {
        clusterOptions = '-l h_vmem=10G'
    }
    withName: scoreEdges {
        clusterOptions = '-l h_vmem=15G'
    }
    withName: heatmap_tops {
        clusterOptions = '-l h_vmem=20G'
    }
    withName: clustermap_regs {
        clusterOptions = '-l h_vmem=20G'
    }
    withName: regmaps {
        clusterOptions = '-l h_vmem=20G'
    }
}
